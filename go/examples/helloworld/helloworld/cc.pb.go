// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cc.proto

package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type CCRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCRequest) Reset()         { *m = CCRequest{} }
func (m *CCRequest) String() string { return proto.CompactTextString(m) }
func (*CCRequest) ProtoMessage()    {}
func (*CCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc_60646e67f6f25677, []int{0}
}
func (m *CCRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCRequest.Unmarshal(m, b)
}
func (m *CCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCRequest.Marshal(b, m, deterministic)
}
func (dst *CCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCRequest.Merge(dst, src)
}
func (m *CCRequest) XXX_Size() int {
	return xxx_messageInfo_CCRequest.Size(m)
}
func (m *CCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CCRequest proto.InternalMessageInfo

func (m *CCRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type CCReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCReply) Reset()         { *m = CCReply{} }
func (m *CCReply) String() string { return proto.CompactTextString(m) }
func (*CCReply) ProtoMessage()    {}
func (*CCReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc_60646e67f6f25677, []int{1}
}
func (m *CCReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCReply.Unmarshal(m, b)
}
func (m *CCReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCReply.Marshal(b, m, deterministic)
}
func (dst *CCReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCReply.Merge(dst, src)
}
func (m *CCReply) XXX_Size() int {
	return xxx_messageInfo_CCReply.Size(m)
}
func (m *CCReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CCReply.DiscardUnknown(m)
}

var xxx_messageInfo_CCReply proto.InternalMessageInfo

func (m *CCReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*CCRequest)(nil), "helloworld.CCRequest")
	proto.RegisterType((*CCReply)(nil), "helloworld.CCReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CCClient is the client API for CC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CCClient interface {
	// Sends a greeting
	SayCC(ctx context.Context, in *CCRequest, opts ...grpc.CallOption) (*CCReply, error)
}

type cCClient struct {
	cc *grpc.ClientConn
}

func NewCCClient(cc *grpc.ClientConn) CCClient {
	return &cCClient{cc}
}

func (c *cCClient) SayCC(ctx context.Context, in *CCRequest, opts ...grpc.CallOption) (*CCReply, error) {
	out := new(CCReply)
	err := c.cc.Invoke(ctx, "/helloworld.CC/SayCC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCServer is the server API for CC service.
type CCServer interface {
	// Sends a greeting
	SayCC(context.Context, *CCRequest) (*CCReply, error)
}

func RegisterCCServer(s *grpc.Server, srv CCServer) {
	s.RegisterService(&_CC_serviceDesc, srv)
}

func _CC_SayCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCServer).SayCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.CC/SayCC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCServer).SayCC(ctx, req.(*CCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.CC",
	HandlerType: (*CCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayCC",
			Handler:    _CC_SayCC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cc.proto",
}

func init() { proto.RegisterFile("cc.proto", fileDescriptor_cc_60646e67f6f25677) }

var fileDescriptor_cc_60646e67f6f25677 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x48, 0x4e, 0xd6, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xca, 0x48, 0xcd, 0xc9, 0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49,
	0x51, 0x92, 0xe7, 0xe2, 0x74, 0x76, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2,
	0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x94,
	0xb9, 0xd8, 0x41, 0x0a, 0x0a, 0x72, 0x2a, 0x85, 0x24, 0xb8, 0xd8, 0x73, 0x53, 0x8b, 0x8b, 0x13,
	0xd3, 0x61, 0x2a, 0x60, 0x5c, 0x23, 0x6b, 0x2e, 0x26, 0x67, 0x67, 0x21, 0x53, 0x2e, 0xd6, 0xe0,
	0xc4, 0x4a, 0x67, 0x67, 0x21, 0x51, 0x3d, 0x84, 0x0d, 0x7a, 0x70, 0xe3, 0xa5, 0x84, 0xd1, 0x85,
	0x0b, 0x72, 0x2a, 0x95, 0x18, 0x9c, 0x0c, 0xb8, 0xa4, 0x33, 0xf3, 0xf5, 0xd2, 0x8b, 0x0a, 0x92,
	0xf5, 0x52, 0x2b, 0x12, 0x73, 0x0b, 0x72, 0x52, 0x8b, 0x91, 0x14, 0x3a, 0xf1, 0x7b, 0x80, 0xd8,
	0xe1, 0x20, 0x76, 0x00, 0xc8, 0xf9, 0x01, 0x8c, 0x49, 0x6c, 0x60, 0x7f, 0x18, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x8f, 0xa0, 0xbe, 0x44, 0xd3, 0x00, 0x00, 0x00,
}
